from django.db import models
from django.urls import reverse
import logging
import os
from bson import ObjectId
from django.conf import settings
from django.core.files.storage import FileSystemStorage
from djongo import models 
from mongoengine import Document, StringField
from django.contrib.auth.hashers import make_password, check_password


# Configure logging
logger = logging.getLogger(__name__)

# Custom storage class (for secure file handling)
class SecureFileSystemStorage(FileSystemStorage):
    def _save(self, name, content):
        dirname = os.path.dirname(self.path(name))
        try:
            os.makedirs(dirname, exist_ok=True)
            os.chmod(dirname, 0o755)
        except Exception as e:
            logger.error(f"Error creating directory {dirname}: {str(e)}")
            raise
        full_path = super()._save(name, content)
        try:
            os.chmod(self.path(full_path), 0o644)
        except Exception as e:
            logger.error(f"Error setting file permissions for {full_path}: {str(e)}")
            raise
        return full_path

secure_storage = SecureFileSystemStorage(
    location=settings.MEDIA_ROOT,
    base_url=settings.MEDIA_URL
)


class Exploit(models.Model):
    CATEGORY_CHOICES = [
        ('web', 'Web Application'),
        ('remote', 'Remote'),
        ('local', 'Local'),
        ('dos', 'Denial of Service'),
        ('webapps', 'Web Applications'),
        ('mobile', 'Mobile'),
        ('hardware', 'Hardware'),
        ('other', 'Other'),
    ]
    
    id = models.CharField(
        max_length=24,
        primary_key=True,
        default=lambda: str(ObjectId()),
        editable=False
    )

    title = models.CharField(max_length=255)
    CVE_ID = models.CharField(max_length=50, blank=True)
    category = models.CharField(max_length=50, choices=CATEGORY_CHOICES, default='other')
    CVSS = models.DecimalField(max_digits=3, decimal_places=1, null=True, blank=True)
    platform = models.CharField(max_length=100, blank=True)
    description = models.TextField(blank=True)
    date_added = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return self.title
    
    def get_absolute_url(self):
        return reverse('exploit_detail', args=[str(self.id)])

class ExploitFile(models.Model):
    exploit = models.ForeignKey(Exploit, related_name='files', on_delete=models.CASCADE)
    id = models.CharField(
        max_length=24,
        primary_key=True,
        default=lambda: str(ObjectId()),
        editable=False
    )
    file = models.FileField(upload_to='exploits/')
    name = models.CharField(max_length=255)
    
    def __str__(self):
        return f"{self.name} ({self.exploit.title})"
    
    @property
    def url(self):
        return self.file.url

class DirectoryFile(models.Model):
    exploit = models.ForeignKey(Exploit, related_name='directory_files', on_delete=models.CASCADE)
    id = models.CharField(
        max_length=24,
        primary_key=True,
        default=lambda: str(ObjectId()),
        editable=False
    )
    file = models.FileField(upload_to='exploits/directories/')
    relative_path = models.CharField(max_length=500)  # Store the full relative path
    directory_name = models.CharField(max_length=255)  # Store directory grouping name
    
    def __str__(self):
        return f"{self.relative_path} in {self.directory_name}"
    
    @property
    def url(self):
        return self.file.url
    
    @property
    def name(self):
        return self.relative_path.split('/')[-1]  # Get just the filename portion

class User(Document):
    username = StringField(max_length=100, required=True, unique=True)
    password = StringField(required=True)

    def set_password(self, raw_password):
        self.password = make_password(raw_password)

    def check_password(self, raw_password):
        return check_password(raw_password, self.password)