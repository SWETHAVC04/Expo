from django import forms
from django.contrib.auth.forms import AuthenticationForm
from django.forms import TextInput, PasswordInput
from .models import Exploit, ExploitFile
from django.core.validators import FileExtensionValidator
import bleach
import os
import re

ALLOWED_TAGS = [
    'p', 'br', 'div', 'span',
    'strong', 'em', 'u', 's',
    'sub', 'sup',
    'ol', 'ul', 'li',
    'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
    'blockquote', 'pre', 'code',
    'a', 'img', 'iframe'
]

ALLOWED_ATTRIBUTES = {
    'a': ['href', 'title', 'target', 'rel'],
    'img': ['src', 'alt', 'width', 'height'],
    'iframe': ['src', 'width', 'height', 'frameborder', 'allow', 'allowfullscreen'],
    'span': ['style', 'class', 'dir'],
    'div': ['style', 'class', 'dir', 'align'],
    'p': ['style', 'class', 'dir', 'align'],
    'h1': ['style'], 'h2': ['style'], 'h3': ['style'],
    'h4': ['style'], 'h5': ['style'], 'h6': ['style']
}

ALLOWED_STYLES = [
    'color',
    'background-color',
    'text-align',
    'direction',
    'font-size',
    'font-family',
    'font-weight',
    'text-decoration'
]

MAX_FILE_SIZE = 10 * 1024 * 1024  # 10 MB


class ExploitForm(forms.ModelForm):
    files = forms.FileField(
        widget=forms.ClearableFileInput(attrs={'multiple': True}),
        required=False,
        validators=[FileExtensionValidator(['dll', 'json', 'javascript', 'toml', 'md', 'pdf', 'docx', 'video', 'audio', 'cab', 'tex', 'svg', 'woff', 'woff2', 'eot', 'ttf', 'css', 'html', 'python', 'image', 'zip', 'tar', 'gzip', 'xml', 'pptx', 'text', 'csv', 'cpp', 'tsv', 'c', 'tfevents'])]
    )

    description = forms.CharField(widget=forms.HiddenInput())

    class Meta:
        model = Exploit
        fields = ['title', 'category', 'CVSS', 'platform', 'CVE_ID', 'description']
        widgets = {
            'title': forms.TextInput(attrs={'placeholder': 'Enter title'}),
            'category': forms.Select(choices=Exploit.CATEGORY_CHOICES),
            'CVSS': forms.NumberInput(attrs={'placeholder': 'Enter CVSS score'}),
            'platform': forms.TextInput(attrs={'placeholder': 'Enter platform'}),
            'CVE_ID': forms.TextInput(attrs={'placeholder': 'Enter CVE ID'}),
            'description': forms.Textarea(attrs={'placeholder': 'Enter description'}),
        }
    
    def clean_description(self):
        raw = self.cleaned_data.get('description', '')
        sanitized = bleach.clean(raw, tags=ALLOWED_TAGS, attributes=ALLOWED_ATTRIBUTES, strip=True)
        return sanitized
    
    def clean_CVSS(self):
        cvss = self.cleaned_data.get('CVSS')
        if cvss is not None and (cvss < 0 or cvss > 10):
            raise forms.ValidationError("CVSS score must be between 0.0 and 10.0")
        return cvss
    
    def clean_CVE_ID(self):
        cve_id = self.cleaned_data.get('CVE_ID', '').strip()
        if cve_id and not re.match(r'^CVE-\d{4}-\d{4,}$', cve_id):
            raise forms.ValidationError("CVE ID must be in the format CVE-YYYY-NNNN (e.g., CVE-2023-1234)")
        return cve_id


class ExploitFileForm(forms.ModelForm):
    class Meta:
        model = ExploitFile
        fields = ['file']
        widgets = {
            'file': forms.FileInput(attrs={'accept': '.dll,.json,.javascript,.toml,.md,.pdf,.docx,.video,.audio,.cab,.tex,.svg,.woff,.woff2,.eot,.ttf,.css,.html,.python,.image,.zip,.tar,.gzip,.xml,.pptx,.text,.csv,.cpp,.tsv,.c,.tfevents'})
        }
    
    def clean_files(self):
        uploaded_files = self.files.getlist('files')
        for f in uploaded_files:
            if f.size > MAX_FILE_SIZE:
                raise forms.ValidationError(f"File {f.name} exceeds size limit (10MB)")
        return uploaded_files

class LoginForm(AuthenticationForm):
    username = forms.CharField(widget=TextInput(attrs={'autocomplete': 'off'}))
    password = forms.CharField(widget=PasswordInput(attrs={'autocomplete': 'off'}))
